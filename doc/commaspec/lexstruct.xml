<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is distributed under the MIT License.  See LICENSE.txt for
     details.

     Copyright 2008-2009, Stephen Wilson
-->

<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink" version="5.0"
         xml:id="lexical-structure">

  <title>Lexical Structure</title>

  <sect1 xml:id="sect.standard-cset">
    <title>The Standard Character Set</title>

    <para>
      <indexterm xml:id="index.character.ascii">
        <primary>character</primary>
        <secondary><acronym>ASCII</acronym></secondary>
      </indexterm>

      <indexterm xml:id="index.character.IS0-8859-1">
        <primary>character</primary>
        <secondary><acronym>ISO</acronym>8859-1</secondary>
      </indexterm>

      Comma programs are written using a subset of the 8-bit character set
      <acronym>ISO</acronym> 8859-1 (Latin-1). This subset is called the
      <firstterm>standard character set</firstterm> A character not present in
      the standard character set but occurring in the source code will trigger a
      compile time error.
    </para>

    <para>
      The following table associates with each character a name, the
      hexadecimal value of its encoding, and a brief description.  The
      characters name is the standard glyph used to present that character if
      it is a graphic character.  For characters with no distinct (or visible)
      graphic representation, a symbolic name is provided.
    </para>

    <xi:include  href="cset.xml"/>

    <note>
      <indexterm xml:id="index.character.unicode">
        <primary>character</primary>
        <secondary>unicode</secondary>
      </indexterm>

      <para>
        It is possible that this specification will evolve to include program
        source written using the UTF-8 encoding, defined by the <link
        xl:href="http://www.unicode.org">Unicode</link> character standard. All
        reserved words will be specified using the current, compatible, standard
        character set.
      </para>
    </note>
  </sect1>

  <sect1 xml:id="sect.maximal-match">
    <title>The Maximal Match Rule</title>

    <para>
      Lexical analysis proceeds by obeying the <quote>maximal match</quote>
      rule: When a character sequence can be transformed into two or more
      lexemes, the lexeme with the longest character representation is
      selected.  Thus, although <literal>domain</literal> is a reserved word,
      <literal>domains</literal> is not.
    </para>
  </sect1>

  <sect1 xml:id="sect.notational-conventions">

    <title>Notational Conventions</title>

    <indexterm xml:id="index.notational-conventions">
      <primary>notational conventions</primary>
    </indexterm>

    <para>

      The syntax of the following grammar rules make use of the following constructs:

      <variablelist spacing='compact'>
        <varlistentry>
          <term> [<replaceable>pattern</replaceable>] </term>
          <listitem> <para>
            <replaceable>pattern</replaceable> may occur optionally.
          </para> </listitem>
        </varlistentry>

        <varlistentry>
          <term> {<replaceable>pattern</replaceable>} </term>
          <listitem> <para>
            <replaceable>pattern</replaceable> may occur zero or more times.
          </para> </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <replaceable>pattern1</replaceable> |
            <replaceable>pattern2</replaceable>
          </term>
          <listitem>
            <para>
              Choice of either <replaceable>pattern1</replaceable> or
              <replaceable>pattern2</replaceable>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </sect1>

  <sect1 xml:id="sect.line-terminators">
    <title>Line Terminators</title>

    <para>
      Input programs are scanned and divided into lines. Error messages
      reported by the compiler and associated tools will make use of the line
      number to produce useful diagnostic messages.  Line terminators also
      indicate the end of a comment.
    </para>

    <productionset><title>Line Terminators</title>
    <production xml:id="ebnf.line_terminator">
      <lhs>Line_Terminator</lhs>
      <rhs>
        Linefeed | Carriage-Return | Carriage-Return Linefeed
      </rhs>
    </production>

    <production xml:id="ebnf.input_character">
      <lhs>Input_Character</lhs>
      <rhs>
        All characters in the <link linkend="sect.standard-cset">standard
        character set</link>.
      </rhs>
    </production>
    </productionset>

  </sect1>


  <sect1 xml:id="sect.comments">
    <title>Comments</title>
    <para>
      Comments begin with the two characters --, with no whitespace, and
      continue to the end of the line.  Comments do not appear within character
      or string literals.
    </para>

    <productionset>
      <title>Comments</title>

      <production xml:id="ebnf.comment">
        <lhs>Comment</lhs>
        <rhs>
	  --
	  { <nonterminal def="#ebnf.input_character">Input_Character</nonterminal> }
          <nonterminal def="#ebnf.line_terminator">Line_Terminator</nonterminal>
        </rhs>
      </production>
    </productionset>

  </sect1>

  <sect1 xml:id="sect.whitespace">
    <title>Whitespace</title>
    <para>
      Whitespace consists of the space, horizontal tab, and form feed
      characters, as well as line terminators and comments. Whitespace is a
      proper delimiter for lexemes.
    </para>

    <productionset>
      <title>Whitespace</title>
      <production xml:id="ebnf.whitespace">
        <lhs>Whitespace</lhs>
        <rhs>
          <nonterminal def="#ebnf.white_char">White_Char</nonterminal> |
          <nonterminal def="#ebnf.line_terminator">Line_Terminator</nonterminal> |
          <nonterminal def="#ebnf.comment">Comment</nonterminal>
        </rhs>
      </production>

      <production xml:id="ebnf.white_char">
        <lhs>White_Char</lhs>
        <rhs>
          Space | Tab | Formfeed
        </rhs>
      </production>

    </productionset>

  </sect1>

  <sect1 xml:id="sect.seperators">
    <title>Separators</title>
    <para>
      The following characters are the <emphasis>separators</emphasis> (also
      known as punctuators or delimiters).
    </para>

    <informaltable frame='none'>
      <tgroup cols='10' align='left'>
        <?dbhtml cellspacing="10" ?>
        <tbody>
          <row>
            <entry><keysym>(</keysym></entry>
            <entry><keysym>)</keysym></entry>
            <entry><keysym>:</keysym></entry>
            <entry><keysym>;</keysym></entry>
            <entry><keysym>,</keysym></entry>
            <entry><keysym>.</keysym></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

  </sect1>

  <sect1 xml:id="sect.identifiers">
    <title>Identifiers</title>

    <para>
      An identifier is a sequence of characters. The initial character of the
      sequence must be an alphabetic character.  All remaining characters can be
      any of the lower or uppercase alphabetic characters, a numeric digit, or
      the character '_'.  An identifier may not contain two consecutive
      underscore characters.
    </para>

    <para>
      Two identifiers are considered the same if their respective character
      sequences are identical.  Thus, identifiers are case sensitive.
    </para>

    <example>
      <title>Some valid Comma identifiers:</title>
      <informaltable frame='none'>
        <tgroup cols='6' align='left'>
          <?dbhtml cellspacing="10" ?>
          <tbody>
            <row>
              <entry><varname>x</varname></entry>
              <entry><varname>integer</varname></entry>
              <entry><varname>INTEGER</varname></entry>
              <entry><varname>Max_Index</varname></entry>
              <entry><varname>x1234</varname></entry>
              <entry><varname>x_4</varname></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </example>

    <productionset>
      <title>Identifiers</title>

      <production xml:id="ebnf.identifier">
        <lhs>Identifier</lhs>
        <rhs>
	  <nonterminal def="#ebnf.alpha">Alpha</nonterminal>
	  { <nonterminal def="#ebnf.identifier_char">Identifier_Char</nonterminal> }
        </rhs>
	<constraint linkend="ebnf.identifier_constraint"/>
      </production>

      <production xml:id="ebnf.identifier_char">
        <lhs>Identifier_Char</lhs>
        <rhs>
          <nonterminal def="#ebnf.alpha">Alpha</nonterminal> |
          <nonterminal def="#ebnf.digit">Digit</nonterminal> |
          _
        </rhs>
      </production>

      <production xml:id="ebnf.alpha">
        <lhs>Alpha</lhs>
        <rhs>
	  a | b | ... | z | A | B | ... | Z
        </rhs>
      </production>

      <production xml:id="ebnf.digit">
        <lhs>Digit</lhs>
        <rhs> 0 | 1 | ... | 9 </rhs>
      </production>

    </productionset>

    <constraintdef id="ebnf.identifier_constraint">
      <title>Identifiers and Reserved Words</title>
      <para>An identifier shall not be a reserved word.</para>
    </constraintdef>

  </sect1>

  <sect1 xml:id="sect.reserved-words">
    <title>Reserved Words</title>

    <para>
      The following character sequences are reserved words and may not be used
      as identifiers:
    </para>

    <table xmlns="http://docbook.org/ns/docbook" frame='none'>
      <title>Reserved Words</title>

      <tgroup cols='6' align='left' colsep='1' rowsep='1'>
        <?dbhtml cellpadding="10" ?>
        <tbody>
          <row>
            <entry>abstract</entry>  <entry>add</entry>
            <entry>and</entry>       <entry>array</entry>
            <entry>carrier</entry>   <entry>begin</entry>
          </row>

          <row>
            <entry>declare</entry>   <entry>domain</entry>
            <entry>else</entry>      <entry>elsif</entry>
            <entry>end</entry>       <entry>for</entry>
          </row>

          <row>
            <entry>function</entry>  <entry>generic</entry>
            <entry>if</entry>        <entry>import</entry>
            <entry>in</entry>        <entry>inj</entry>
          </row>

          <row>
            <entry>is</entry>        <entry>loop</entry>
            <entry>mod</entry>       <entry>of</entry>
            <entry>out</entry>       <entry>others</entry>
          </row>

          <row>
            <entry>pragma</entry>    <entry>prj</entry>
            <entry>procedure</entry> <entry>range</entry>
            <entry>rem</entry>       <entry>return</entry>
          </row>

          <row>
            <entry>reverse</entry>   <entry>signature</entry>
            <entry>subtype</entry>   <entry>then</entry>
            <entry>type</entry>      <entry>while </entry>
          </row>

          <row>
            <entry>with</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 xml:id="sect.operator-symbols">
    <title>Operator Symbols</title>

    <para>
      The following tokens are the <emphasis>operators</emphasis>.  These
      symbols have special productions in the grammar of the language and can be
      used as the defining identifier of a function declaration.
    </para>

    <table xmlns="http://docbook.org/ns/docbook" frame='none'>
      <title>Operators</title>
      <tgroup cols='6' align='center' colsep='1' rowsep='1'>
        <?dbhtml cellpadding="10" ?>
        <tbody>
          <row>
            <entry>=</entry>     <entry>/=</entry>    <entry>&lt;</entry>
            <entry>&gt;</entry>  <entry>&lt;=</entry> <entry>&gt;=</entry>
          </row>

          <row>
            <entry>+</entry> <entry>-</entry> <entry>*</entry>
            <entry>&amp;</entry> <entry>/</entry> <entry>**</entry>
          </row>

          <row>
            <entry>mod</entry> <entry>rem</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 xml:id="sect.literals">
    <title>Literals</title>
    <para>
      Literals are primitive values in Comma programs which have a direct
      representation in source code.  There are literals for integer, floating
      point, string, and character values.
    </para>

    <sect2 xml:id="sect.integer-literals">
      <title>Integer Literals</title>

      <para>
        An integer literal may be expressed in decimal (base 10), hexadecimal
        (base 16), octal (base 8), or binary (base 2).
      </para>

      <para>
        For the sake of readability the underscore character '_' can be appear
        within an integer literal.  These characters are ignored and serve only
        to help improve readability.
      </para>


      <productionset>
        <title>Integer Literals</title>

        <production xml:id="ebnf.integer">
          <lhs>Integer</lhs>
          <rhs>
            <nonterminal def="#ebnf.decimal_literal">Decimal_Literal</nonterminal> |
            <nonterminal def="#ebnf.hexadecimal_literal">Hexadecimal_Literal</nonterminal> |
            <nonterminal def="#ebnf.octal_literal">Octal_Literal</nonterminal> |
            <nonterminal def="#ebnf.binary_literal">Binary_Literal</nonterminal>
          </rhs>
        </production>

        <production xml:id="ebnf.decimal_literal">
          <lhs>Decimal_Literal</lhs>
          <rhs>
            <nonterminal def="#ebnf.digit">Digit</nonterminal>
            { <nonterminal def="#ebnf.digit">Digit</nonterminal>
            | Uscore }
          </rhs>
        </production>

        <production xml:id="ebnf.hexadecimal_literal">
          <lhs>Hexadecimal_Literal</lhs>
          <rhs>
            0X <nonterminal def="ebnf.hexadecimal_digit">Hexadecimal_Digit</nonterminal>
            { <nonterminal def="ebnf.hexadecimal_digit">Hexadecimal_Digit</nonterminal>
            | Uscore }
          </rhs>
        </production>

        <production xml:id="ebnf.octal_literal">
          <lhs>Octal_Literal</lhs>
          <rhs>
            0O <nonterminal def="#ebnf.octal_digit">Octal_Digit</nonterminal>
            { <nonterminal def="#ebnf.octal_digit">Octal_Digit</nonterminal>
            | Uscore }
          </rhs>
        </production>

        <production xml:id="ebnf.binary_literal">
          <lhs>Binary_Literal</lhs>
          <rhs>
            0B <nonterminal def="#ebnf.binary_digit">Binary_Digit</nonterminal>
            { <nonterminal def="#ebnf.binary_digit">Binary_Digit</nonterminal>
            | Uscore }
          </rhs>
        </production>

        <production xml:id="ebnf.hexadecimal_digit">
          <lhs>Hexadecimal_Digit</lhs>
          <rhs>
            <nonterminal def="#ebnf.digit">Digit</nonterminal> |
            a | b | ... | f | A | B | ... | F
          </rhs>
        </production>

        <production xml:id="ebnf.octal_digit">
          <lhs>Octal_Digit</lhs>
          <rhs> 0 | 1 | ... | 7 </rhs>
        </production>

        <production xml:id="ebnf.binary_digit">
          <lhs>Binary_Digit</lhs>
          <rhs> 0 | 1 </rhs>
        </production>

      </productionset>

    </sect2>

    <sect2 xml:id="sect.floating-point-literals">
      <title>Floating-point Literals</title>
      <para>
        A floating-point literal can consist of an integer part, a decimal
        point, a fractional part, and an exponent.  The decimal point is
        represented by the <acronym>ASCII</acronym> character '.'. The exponent
        is represented by either the characters 'e' or 'E', followed by an
        optional '+' or '-' sign, followed by one or more digits.  In order to
        avoid ambiguity with integer decimal literals, a floating-point literal
        must contain either a decimal point, an exponent, or a float type
        suffix.
      </para>

      <productionset>
        <title>Floating-point Literals</title>

        <production xml:id="ebnf.float_literal">
          <lhs>Float_Literal</lhs>
          <rhs>
            { <nonterminal def="#ebnf.digit">Digit</nonterminal> } .
            [ { <nonterminal def="#ebnf.digit">Digit</nonterminal> } ]
            [ <nonterminal def="#ebnf.exponent_part">Exponent_Part</nonterminal> ] | <sbr/>
            . { <nonterminal def="#ebnf.digit">Digit</nonterminal> }
            [ <nonterminal def="#ebnf.exponent_part">Exponent_Part</nonterminal> ] | <sbr/>
            { <nonterminal def="#ebnf.digit">Digit</nonterminal> }
            [ <nonterminal def="#ebnf.exponent_part">Exponent_Part</nonterminal> ] | <sbr/>
            { <nonterminal def="#ebnf.digit">Digit</nonterminal> }
            <nonterminal def="#ebnf.exponent_part">Exponent_Part</nonterminal>
          </rhs>
        </production>

        <production xml:id="ebnf.exponent_part">
          <lhs>Exponent_Part</lhs>
          <rhs>
             E + <nonterminal def="#ebnf.digit">Digit</nonterminal> |
             E - <nonterminal def="#ebnf.digit">Digit</nonterminal>
          </rhs>
        </production>
      </productionset>
    </sect2>

    <sect2>
      <title>String Literals</title>

      <para>
        A string literal is a character sequence delimited by the
        <acronym>ASCII</acronym> " (double quote, code <keycode>0x22</keycode>)
        character.
      </para>

      <productionset>
        <title>String Literals</title>

        <production xml:id="ebnf.string_literal">
          <lhs>String_Literal</lhs>
          <rhs>
            " { <nonterminal def="#ebnf.string_character">String_Character</nonterminal> } "
          </rhs>
        </production>

        <production xml:id="ebnf.string_character">
          <lhs>String_Character</lhs>
          <rhs>
            <nonterminal def="#ebnf.input_character">Input_Character</nonterminal>
            <lineannotation>Except <keysym>"</keysym>.</lineannotation>
          </rhs>
        </production>

      </productionset>
    </sect2>

    <sect2 xml:id="sect.character_literals">
      <title>Character Literals</title>
      <para>
        A character literal is a single input character delimited by single
        quotes (<acronym>ASCII</acronym> code
        <keycode>0x27</keycode>).
      </para>
      <productionset>
        <title>Character Literals</title>
        <production xml:id="ebnf.character_literal">
          <lhs>Character_Literal</lhs>
          <rhs>
            ' <nonterminal def="#ebnf.input_character">Input_Character</nonterminal> '
          </rhs>
        </production>
      </productionset>

      <example>
        <title>Examples of character literals:</title>
        <informaltable frame='none'>
          <tgroup cols='4' align='left'>
            <?dbhtml cellspacing="10" ?>
            <tbody>
              <row>
                <entry><literal>'A'</literal></entry>
                <entry><literal>'_'</literal></entry>
                <entry><literal>'"'</literal></entry>
                <entry><literal>'''</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </example>

    </sect2>
  </sect1>
</chapter>
