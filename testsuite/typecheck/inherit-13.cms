-- This test case works the logic underlying overriding declarations.

signature S with
   procedure P (X : in out %);
end S;


signature T with
   procedure P (X : in %);
end T;


signature U with
   procedure P (X : out %);
end U;


signature V is
   S;
   T;
   U;
with
   procedure X (A : in out %) overrides S.P;
   procedure Y (A : in     %) overrides T.P;
end V;


domain Foo is
   V;
with
   function Make (X : Integer) return %;
add
   carrier Rep is Integer;

   procedure X (A : in out %) is begin end X;
   procedure Y (A : in     %) is begin end Y;
   procedure P (X :    out %) is begin end P;
   function Make (X : Integer) return % is
   begin
      return prj X;
   end Make;
end Foo;


generic
   abstract domain F is
      T;
   with
      function Make(X : Integer) return %;
   end F;
domain Bar with
   procedure Test;
add
   procedure Test is
   begin
      F.P(F.Make(0));
   end Test;
end Bar;


domain Baz add
   procedure Test is
   begin
      Bar(Foo).Test;
   end Test;
end Baz;


